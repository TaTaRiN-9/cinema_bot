// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cinema.Data;

#nullable disable

namespace cinema.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20241210111734_user-replace-string-to-long")]
    partial class userreplacestringtolong
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cinema.Data.Entities.Hall", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tbl_hall");

                    b.HasData(
                        new
                        {
                            id = new Guid("0b19381e-7fb3-4184-99ad-889eb18d280e"),
                            name = "Малый зал"
                        },
                        new
                        {
                            id = new Guid("78be86b9-49eb-4eea-8bfa-11fdcc4786c0"),
                            name = "Большой зал"
                        });
                });

            modelBuilder.Entity("cinema.Data.Entities.Movie", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("duration")
                        .HasColumnType("integer");

                    b.Property<string>("photo_url")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("tbl_movie");

                    b.HasData(
                        new
                        {
                            id = new Guid("b91f69c2-1547-4736-b84b-d4a73d6e8664"),
                            description = "Тут некоторое описание для фильма 1",
                            duration = 104,
                            title = "Фильм 1"
                        },
                        new
                        {
                            id = new Guid("496a1060-f32f-4c94-bf6f-60258b1b8e14"),
                            description = "Тут некоторое описание для фильма 2",
                            duration = 98,
                            title = "Фильм 2"
                        });
                });

            modelBuilder.Entity("cinema.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("hall_id")
                        .HasColumnType("uuid");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("hall_id");

                    b.ToTable("tbl_row");

                    b.HasData(
                        new
                        {
                            id = new Guid("59ff6c4f-bd1f-44dd-bf5c-c943f4bcc6fb"),
                            hall_id = new Guid("0b19381e-7fb3-4184-99ad-889eb18d280e"),
                            number = 1
                        },
                        new
                        {
                            id = new Guid("9e5d95d9-ea83-47c0-9b2b-7e76f1ca9a56"),
                            hall_id = new Guid("0b19381e-7fb3-4184-99ad-889eb18d280e"),
                            number = 2
                        });
                });

            modelBuilder.Entity("cinema.Data.Entities.Seat", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<Guid>("row_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("row_id");

                    b.ToTable("tbl_seat");

                    b.HasData(
                        new
                        {
                            id = new Guid("fa23004c-4427-4ee4-9e31-5f6bf08f14f9"),
                            number = 1,
                            row_id = new Guid("59ff6c4f-bd1f-44dd-bf5c-c943f4bcc6fb"),
                            status = true
                        },
                        new
                        {
                            id = new Guid("d34df66b-f33e-4d99-aae5-7ab8ac7fdb71"),
                            number = 2,
                            row_id = new Guid("59ff6c4f-bd1f-44dd-bf5c-c943f4bcc6fb"),
                            status = true
                        },
                        new
                        {
                            id = new Guid("bb74c7cc-606b-4ade-bff3-d893b7d40a16"),
                            number = 3,
                            row_id = new Guid("59ff6c4f-bd1f-44dd-bf5c-c943f4bcc6fb"),
                            status = true
                        },
                        new
                        {
                            id = new Guid("674dad84-83ea-4210-a543-71df30f0154c"),
                            number = 4,
                            row_id = new Guid("59ff6c4f-bd1f-44dd-bf5c-c943f4bcc6fb"),
                            status = true
                        },
                        new
                        {
                            id = new Guid("7b3497c5-49f5-46c1-9618-2e3455af6b58"),
                            number = 1,
                            row_id = new Guid("9e5d95d9-ea83-47c0-9b2b-7e76f1ca9a56"),
                            status = true
                        },
                        new
                        {
                            id = new Guid("04307b99-eb3e-4eda-89cf-ac437f19bc16"),
                            number = 2,
                            row_id = new Guid("9e5d95d9-ea83-47c0-9b2b-7e76f1ca9a56"),
                            status = false
                        },
                        new
                        {
                            id = new Guid("38b89d78-01d7-4cb8-9b1b-549c4740cc29"),
                            number = 3,
                            row_id = new Guid("9e5d95d9-ea83-47c0-9b2b-7e76f1ca9a56"),
                            status = false
                        });
                });

            modelBuilder.Entity("cinema.Data.Entities.Session", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("hall_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("movie_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("hall_id");

                    b.HasIndex("movie_id");

                    b.ToTable("tbl_session");

                    b.HasData(
                        new
                        {
                            id = new Guid("0b8487fc-e894-4db1-8473-43e9b8dca2de"),
                            end_time = new DateTime(2024, 10, 28, 20, 15, 0, 0, DateTimeKind.Utc),
                            hall_id = new Guid("0b19381e-7fb3-4184-99ad-889eb18d280e"),
                            movie_id = new Guid("b91f69c2-1547-4736-b84b-d4a73d6e8664"),
                            price = 250m,
                            start_time = new DateTime(2024, 10, 28, 18, 30, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("cinema.Data.Entities.Ticket", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("seat_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("session_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("seat_id")
                        .IsUnique();

                    b.HasIndex("session_id");

                    b.HasIndex("user_id");

                    b.ToTable("tbl_ticket");

                    b.HasData(
                        new
                        {
                            id = new Guid("7c9e5e59-e447-4bf0-82d5-81b96efed85d"),
                            seat_id = new Guid("fa23004c-4427-4ee4-9e31-5f6bf08f14f9"),
                            session_id = new Guid("0b8487fc-e894-4db1-8473-43e9b8dca2de"),
                            user_id = new Guid("cffeaec1-b144-41d4-b573-5f623272d2c0")
                        },
                        new
                        {
                            id = new Guid("ee3d4334-e56f-4b21-bca9-7bf434aee1ce"),
                            seat_id = new Guid("d34df66b-f33e-4d99-aae5-7ab8ac7fdb71"),
                            session_id = new Guid("0b8487fc-e894-4db1-8473-43e9b8dca2de"),
                            user_id = new Guid("cffeaec1-b144-41d4-b573-5f623272d2c0")
                        },
                        new
                        {
                            id = new Guid("c26c0ae8-8131-42e4-91be-92ea52f51708"),
                            seat_id = new Guid("bb74c7cc-606b-4ade-bff3-d893b7d40a16"),
                            session_id = new Guid("0b8487fc-e894-4db1-8473-43e9b8dca2de"),
                            user_id = new Guid("9e82caac-a642-4184-ae2f-19d592b7c667")
                        },
                        new
                        {
                            id = new Guid("e78cdfa3-7d0c-4dc0-8e05-94c187251293"),
                            seat_id = new Guid("674dad84-83ea-4210-a543-71df30f0154c"),
                            session_id = new Guid("0b8487fc-e894-4db1-8473-43e9b8dca2de"),
                            user_id = new Guid("9e82caac-a642-4184-ae2f-19d592b7c667")
                        },
                        new
                        {
                            id = new Guid("82babe00-0f46-4e08-9930-e2d3479e38d8"),
                            seat_id = new Guid("7b3497c5-49f5-46c1-9618-2e3455af6b58"),
                            session_id = new Guid("0b8487fc-e894-4db1-8473-43e9b8dca2de"),
                            user_id = new Guid("9e82caac-a642-4184-ae2f-19d592b7c667")
                        });
                });

            modelBuilder.Entity("cinema.Data.Entities.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("chat_id")
                        .HasColumnType("bigint");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.HasKey("id");

                    b.HasIndex("chat_id")
                        .IsUnique();

                    b.HasIndex("phone_number")
                        .IsUnique();

                    b.ToTable("tbl_user");

                    b.HasData(
                        new
                        {
                            id = new Guid("cffeaec1-b144-41d4-b573-5f623272d2c0"),
                            chat_id = 8912345L,
                            phone_number = "89962963698"
                        },
                        new
                        {
                            id = new Guid("9e82caac-a642-4184-ae2f-19d592b7c667"),
                            chat_id = 8912456L,
                            phone_number = "89967351259"
                        });
                });

            modelBuilder.Entity("cinema.Data.Entities.Row", b =>
                {
                    b.HasOne("cinema.Data.Entities.Hall", "hall")
                        .WithMany("rows")
                        .HasForeignKey("hall_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hall");
                });

            modelBuilder.Entity("cinema.Data.Entities.Seat", b =>
                {
                    b.HasOne("cinema.Data.Entities.Row", "row")
                        .WithMany("seats")
                        .HasForeignKey("row_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("row");
                });

            modelBuilder.Entity("cinema.Data.Entities.Session", b =>
                {
                    b.HasOne("cinema.Data.Entities.Hall", "hall")
                        .WithMany("sessions")
                        .HasForeignKey("hall_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema.Data.Entities.Movie", "movie")
                        .WithMany("sessions")
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hall");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("cinema.Data.Entities.Ticket", b =>
                {
                    b.HasOne("cinema.Data.Entities.Seat", "seat")
                        .WithOne("ticket")
                        .HasForeignKey("cinema.Data.Entities.Ticket", "seat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema.Data.Entities.Session", "session")
                        .WithMany("tickets")
                        .HasForeignKey("session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema.Data.Entities.User", "user")
                        .WithMany("tickets")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("seat");

                    b.Navigation("session");

                    b.Navigation("user");
                });

            modelBuilder.Entity("cinema.Data.Entities.Hall", b =>
                {
                    b.Navigation("rows");

                    b.Navigation("sessions");
                });

            modelBuilder.Entity("cinema.Data.Entities.Movie", b =>
                {
                    b.Navigation("sessions");
                });

            modelBuilder.Entity("cinema.Data.Entities.Row", b =>
                {
                    b.Navigation("seats");
                });

            modelBuilder.Entity("cinema.Data.Entities.Seat", b =>
                {
                    b.Navigation("ticket");
                });

            modelBuilder.Entity("cinema.Data.Entities.Session", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("cinema.Data.Entities.User", b =>
                {
                    b.Navigation("tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
